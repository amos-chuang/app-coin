<style>
    table {
        width: 100%;
    }

    td,
    th {
        border: 1px solid #dddddd;
        text-align: center;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd
    }

    .toggleButton {
        color: blue;
        font-weight: bold;
        cursor: pointer;
    }
</style>

<div id="app">
    <h3 style="display: inline-block; margin: 5px 5px 5px 0px;">
        Welcome to AppCoins - may the force be with coins
    </h3>
    <span v-html="currentDateTime"></span>
    <hr>
    <table>
        <tr>
            <th>Bitoex</th>
            <th>Buy (NTD)</th>
            <th>Buy (USD)</th>
            <th>Buy Bitoex/Market %</th>
            <th>Sell (NTD)</th>
            <th>Sell (USD)</th>
            <th>Sell Bitoex/Market %</th>
        </tr>
        <tr style="background-color: #d8faff">
            <td>
                <span v-text="bitoexRefreshTime"></span> _ BTC</td>
            <td>
                <span v-text="bitoexBuyPrice"></span>
            </td>
            <td>
                <span v-text="bitoexBuyPriceUSD"></span>
            </td>
            <td style="background-color:#ff79ff;font-weight:bold;" v-if="bitoexBuyPriceFee>0.15">
                <span v-text="bitoexBuyPriceFee"></span>
            </td>
            <td style="background-color:#ffec45;font-weight:bold;" v-if="bitoexBuyPriceFee>0.1 && bitoexBuyPriceFee<=0.15">
                <span v-text="bitoexBuyPriceFee"></span>
            </td>
            <td style="background-color:#2fff39;font-weight:bold;" v-if="bitoexBuyPriceFee<=0.1">
                <span v-text="bitoexBuyPriceFee"></span>
            </td>
            <td>
                <span v-text="bitoexSellPrice"></span>
            </td>
            <td>
                <span v-text="bitoexSellPriceUSD"></span>
            </td>
            <td style="font-weight:bold;">
                <span v-text="bitoexSellPriceFee"></span>
            </td>
        </tr>
    </table>
    <hr>
    <table>
        <tr>
            <th width="100">Currency</th>
            <th>Price</th>
            <th>Daily %</th>
            <th>Daily</th>
            <th>Holdings</th>
            <th>Cost</th>
            <th>Value</th>
            <th>Profit/Loss</th>
            <th>%</th>
        </tr>
        <tr v-for="target in targetCurrencyList" :currencyName="target.name">
            <td class="toggleButton" @click="toggleTradingData(target.name)">
                <span v-text="target.display"></span>
            </td>
            <td>
                <span v-if="priceList[target.name]" v-text="Math.round(priceList[target.name].lastPrice*10000)/10000"></span>
            </td>
            <td>
                <span style="color:#007c02" v-if="priceList[target.name] && priceList[target.name].dailyChangePercent>0" v-text="priceList[target.name].dailyChangePercent"></span>
                <span style="color:#a00000" v-if="priceList[target.name] && priceList[target.name].dailyChangePercent<0" v-text="priceList[target.name].dailyChangePercent"></span>
            </td>
            <td>
                <span style="color:#007c02" v-if="priceList[target.name] && priceList[target.name].dailyChange>0" v-text="priceList[target.name].dailyChange"></span>
                <span style="color:#a00000" v-if="priceList[target.name] && priceList[target.name].dailyChange<0" v-text="priceList[target.name].dailyChange"></span>
            </td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <!-- <tr style="display:none;" v-show="tradingList['BTCUSD'].isShow">
            <td></td>
            <td colspan="6">
                <table>
                    <tr>
                        <th>Date</th>
                        <th>Price</th>
                        <th>Qty</th>
                        <th>Cost</th>
                        <th>%</th>
                    </tr>
                    <tr>
                        <td>2017-11-29</td>
                        <td>10000</td>
                        <td>3</td>
                        <td>30000</td>
                        <td>+50 %</td>
                    </tr>
                </table>
            </td>
        </tr> -->
        <tr v-for="target in coinoneTargetCurrencyList" :currencyName="target.name">
            <td class="toggleButton" @click="toggleTradingData(target.name)">
                <span v-text="target.display"></span>
            </td>
            <td>
                <span v-if="coinonePriceList[target.name]" v-text="Math.round(coinonePriceList[target.name].lastPrice*100)/100"></span>
                <span>_( </span>
                <span v-if="coinonePriceList[target.name]" v-text="Math.round(coinonePriceList[target.name].lastPrice/1100*100)/100"></span>
                <span> )</span>
            </td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </table>
    <hr>
    <hr>
    <div>
        <div v-for="row in sweetgoldList">{{row}}</div>
    </div>
</div>

<%- contentFor('scripts') %>
    <script>
        $(function () {
            $("#router").attr("src", "https://www.bitoex.com/sync/dashboard_fixed/" + new Date().getTime());
            $("#tb").click(function () {
                console.log($("#router").contents());
                console.log($("#router").contents().find("body"));
            });
        });
        var app = null;
        window.onload = function () {
            app = new Vue({
                el: '#app',
                data: {
                    currentDateTime: "",
                    favoriteCurrencyList: [],
                    targetCurrencyList: [
                        { name: "BTCUSD", display: "BTC" },
                        { name: "IOTUSD", display: "IOT" },
                        { name: "ETHUSD", display: "ETH" },
                        { name: "XMRUSD", display: "XMR" },
                        { name: "LTCUSD", display: "LTC" },
                        { name: "XLMBTC", display: "XLM" },
                        { name: "XRPUSD", display: "XRP" },
                        { name: "DSHUSD", display: "DASH" },
                    ],
                    coinoneTargetCurrencyList: [
                        { name: "BTCKRW", display: "BTC(K)" },
                        { name: "IOTKRW", display: "IOT(K)" }
                    ],
                    searchKeyword: "",
                    tradingList: {
                        BTCUSD: { isShow: false, data: [{ price: 100, qty: 3 }] }
                    },
                    //Bitoex
                    bitoexRefreshTime: "",
                    bitoexBuyPrice: 0,
                    bitoexBuyPriceUSD: 0,
                    bitoexBuyPriceFee: 0,
                    bitoexSellPrice: 0,
                    bitoexSellPriceUSD: 0,
                    bitoexSellPriceFee: 0,
                    //local
                    priceList: {},
                    //Coinone
                    coinonePriceList: {},
                    //PTT
                    sweetgoldList: [],
                },
                methods: {
                    toggleTradingData: (currencyName) => {
                        toggleTradingData(currencyName);
                    }
                },
                mounted: function () {
                    //set timeout
                    setTimeout(() => {
                        refreshCurrentDateTime();
                        queryBitoex();
                        refreshCurrencyPrice();
                        getSweetgoldList();
                    }, 1);
                    //set interval
                    setInterval(() => {
                        refreshCurrentDateTime();
                    }, 1000);
                    setInterval(() => {
                        queryBitoex();
                    }, 15000);
                    setInterval(() => {
                        refreshCurrencyPrice();
                    }, 5000);
                    setInterval(() => {
                        getSweetgoldList();
                    }, 600000);
                }
            });
        };
        function refreshCurrentDateTime() {
            Vue.set(app, "currentDateTime", new Date().toLocaleString().replace(/\//g, "-"));
        }
        function queryBitoex() {
            $.ajax({
                method: "GET",
                url: "./bitoex/query",
                success: function (data) {
                    Vue.set(app, "bitoexRefreshTime", new Date().toLocaleString().replace(/\//g, "-"));
                    Vue.set(app, "bitoexBuyPrice", data.buyPrice);
                    Vue.set(app, "bitoexSellPrice", data.sellPrice);
                    Vue.set(app, "bitoexBuyPriceUSD", Math.round(data.buyPrice / 30 * 100) / 100);
                    Vue.set(app, "bitoexSellPriceUSD", Math.round(data.sellPrice / 30 * 100) / 100);
                    refreshBitoexFee();
                }
            });
        }
        function query(currencyName) {
            $.ajax({
                method: "GET",
                url: "./query/ticker?currencyName=" + currencyName,
                success: function (data) {
                    if (currencyName == "XLMBTC" && app.priceList["BTCUSD"]) {
                        data.lastPrice = data.lastPrice * app.priceList["BTCUSD"].lastPrice;
                        data.prevDayLastPrice = data.prevDayLastPrice * app.priceList["BTCUSD"].lastPrice;
                        data.dailyChange = data.lastPrice - data.prevDayLastPrice;
                        data.dailyChangePercent = Math.round(((data.lastPrice / data.prevDayLastPrice) - 1) * 1000) / 1000;
                        //console.log(data);
                    }
                    var temp = app.priceList;
                    temp[currencyName] = data;
                    Vue.set(app, "priceList", temp);
                    //console.log(temp);
                    refreshBitoexFee();
                }
            });
        }
        function queryCoinone(currencyName) {
            $.ajax({
                method: "GET",
                url: "./coinone/query?currencyName=" + currencyName,
                success: function (data) {
                    var temp = app.priceList;
                    temp[currencyName] = data;
                    Vue.set(app, "coinonePriceList", temp);
                    //console.log(temp);
                }
            });
        }
        function refreshBitoexFee() {
            if (app.priceList['BTCUSD']) {
                var buyPriceFee = (Math.round((((Math.round(app.bitoexBuyPrice * 100 / 30) / 100) / (Math.round(app.priceList['BTCUSD'].lastPrice * 100) / 100)) - 1) * 10000)) / 10000;
                Vue.set(app, "bitoexBuyPriceFee", buyPriceFee);
                var sellPriceFee = (Math.round((((Math.round(app.bitoexSellPrice * 100 / 30) / 100) / (Math.round(app.priceList['BTCUSD'].lastPrice * 100) / 100)) - 1) * 10000)) / 10000;
                Vue.set(app, "bitoexSellPriceFee", sellPriceFee);
            }
        }
        function refreshCurrencyPrice() {
            for (var i = 0; i < app.targetCurrencyList.length; i++) {
                var currencyName = app.targetCurrencyList[i].name;
                query(currencyName);
            }
            for (var i = 0; i < app.coinoneTargetCurrencyList.length; i++) {
                var currencyName = app.coinoneTargetCurrencyList[i].name;
                queryCoinone(currencyName);
            }
        }
        function toggleTradingData(currencyName) {
            var tradingList = app.tradingList;
            if (tradingList[currencyName].isShow) {
                tradingList[currencyName].isShow = false;
            } else {
                tradingList[currencyName].isShow = true;
            }
            Vue.set(app, "tradingList", tradingList);
            //console.log(tradingList[currencyName].isShow);
        }
        function getSweetgoldList() {
            console.log("get list");
            $.ajax({
                method: "GET",
                url: "./ptt/getDailyDiscussionSweetgold",
                success: function (data) {
                    console.log(data);
                    Vue.set(app, "sweetgoldList", data);
                }
            });
        }
    </script>